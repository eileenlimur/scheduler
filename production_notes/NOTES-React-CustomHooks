BEFORE CUSTOM HOOKS:

function Application(props) {
  const [firstname, setFirstName] = useState("");
  const [lastname, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirmation, setPasswordConfirmation] = useState("");

  return (
    <form>
      <input
        value={firstname}
        onChange={(event) => setFirstName(event.target.value)}
      />
      <input
        value={lastname}
        onChange={(event) => setLastName(event.target.value)}
      />
      <input
        value={email}
        onChange={(event) => setEmail(event.target.value)}
      />
      <input
        value={password}
        onChange={(event) => setPassword(event.target.value)}
        type="password"
      />
      <input
        value={passwordConfirmation}
        onChange={(event) => setPasswordConfirmation(event.target.value)}
        type="password"
      />
  </form>
);


AFTER CUSTOM HOOKS:


function useControlledInput(initial) {
  const [value, setValue] = useState(initial);

  return {
    value,
    onChange: (event) => setValue(event.target.value)
  };
}



function Application(props) {
  const firstname = useControlledInput("");
  const lastname = useControlledInput("");
  const email = useControlledInput("");
  const password = useControlledInput("");
  const passwordConfirmation = useControlledInput("");

  return (
    <form>
      <input {...firstname} />
      <input {...lastname} />
      <input {...email} />
      <input {...password} type="password" />
      <input {...passwordConfirmation} type="password" />
    </form>
  );
}


useDebounce:


export default function useDebounce(operation, ms) {
  useEffect(() => {
    const handle = setTimeout(operation, ms);
    return () => clearTimeout(handle);
  }, [operation, ms]);
}